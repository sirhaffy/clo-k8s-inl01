name: Deploy Infrastructure to Azure

on:
  push:
    branches: [master, main]
    paths: ['terraform/**', '.github/workflows/deploy-infrastructure.yml', 'argocd/**']
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  TF_VAR_environment: 'prod'
  TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
  TF_VAR_resource_group_name: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
  TF_VAR_naming_prefix: "${{ secrets.PROJECT_PREFIX }}"
  TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
  TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
  TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Backend Infrastructure
        run: |
          echo "Ensuring backend infrastructure exists..."

          # Ensure Resource Group exists
          if ! az group show --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating Resource Group: ${{ env.TF_BACKEND_RESOURCE_GROUP }}"
            az group create --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" --location "${{ env.TF_VAR_location }}"
          else
            echo "Resource Group exists: ${{ env.TF_BACKEND_RESOURCE_GROUP }}"
          fi

          # Ensure Storage Account exists
          if ! az storage account show --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating Storage Account: ${{ env.TF_BACKEND_STORAGE_ACCOUNT }}"
            az storage account create \
              --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
              --location "${{ env.TF_VAR_location }}" \
              --sku Standard_LRS \
              --allow-blob-public-access false \
              --shared-access-key-enabled false
          else
            echo "Storage Account exists: ${{ env.TF_BACKEND_STORAGE_ACCOUNT }}"
          fi

          # Ensure Storage Container exists
          if ! az storage container show --name "${{ env.TF_BACKEND_CONTAINER }}" --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --auth-mode login &>/dev/null; then
            echo "Creating Storage Container: ${{ env.TF_BACKEND_CONTAINER }}"
            az storage container create \
              --name "${{ env.TF_BACKEND_CONTAINER }}" \
              --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --auth-mode login
          else
            echo "Storage Container exists: ${{ env.TF_BACKEND_CONTAINER }}"
          fi

          echo "Backend infrastructure ready!"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

          terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var="environment=${{ env.TF_VAR_environment }}" \
            -var="location=${{ env.TF_VAR_location }}" \
            -var="resource_group_name=${{ env.TF_VAR_resource_group_name }}" \
            -var="naming_prefix=${{ env.TF_VAR_naming_prefix }}"

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}
          path: ./terraform/tfplan

      - name: Generate plan summary
        run: |
          # Determine plan status based on exit code
          if [ "${{ steps.plan.outputs.exitcode }}" -eq "0" ]; then
            PLAN_STATUS="No changes needed"
          elif [ "${{ steps.plan.outputs.exitcode }}" -eq "2" ]; then
            PLAN_STATUS="Changes planned - ready to apply"
          else
            PLAN_STATUS="Plan failed with errors"
          fi

          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ env.TF_VAR_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | ${{ env.TF_VAR_location }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Plan Status** | **$PLAN_STATUS** |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | Azure Storage (verified) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View full workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.event.inputs.terraform_action == 'apply' && needs.terraform-plan.outputs.tfplan_exitcode == '2'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Backend Infrastructure
        run: |
          echo "Ensuring backend infrastructure exists..."

          # Ensure Resource Group exists
          if ! az group show --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating Resource Group: ${{ env.TF_BACKEND_RESOURCE_GROUP }}"
            az group create --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" --location "${{ env.TF_VAR_location }}"
          else
            echo "Resource Group exists"
          fi

          # Ensure Storage Account exists
          if ! az storage account show --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating Storage Account: ${{ env.TF_BACKEND_STORAGE_ACCOUNT }}"
            az storage account create \
              --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
              --location "${{ env.TF_VAR_location }}" \
              --sku Standard_LRS \
              --allow-blob-public-access false \
              --shared-access-key-enabled false
          else
            echo "Storage Account exists"
          fi

          # Ensure Storage Container exists
          if ! az storage container show --name "${{ env.TF_BACKEND_CONTAINER }}" --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --auth-mode login &>/dev/null; then
            echo "Creating Storage Container: ${{ env.TF_BACKEND_CONTAINER }}"
            az storage container create \
              --name "${{ env.TF_BACKEND_CONTAINER }}" \
              --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --auth-mode login
          else
            echo "Storage Container exists"
          fi

          echo "Backend infrastructure ready!"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}
          path: ./terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: Import Existing Resource Group
        working-directory: ./terraform
        continue-on-error: true
        run: |
          terraform import \
            -var="environment=${{ env.TF_VAR_environment }}" \
            -var="location=${{ env.TF_VAR_location }}" \
            -var="resource_group_name=${{ env.TF_VAR_resource_group_name }}" \
            -var="naming_prefix=${{ env.TF_VAR_naming_prefix }}" \
            module.resource_group.azurerm_resource_group.main \
            "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_VAR_resource_group_name }}"

      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan

          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT

      - name: Generate apply summary
        run: |
          echo "## Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Location: ${{ env.TF_VAR_location }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ steps.terraform.outputs.resource_group_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- AKS Cluster: ${{ steps.terraform.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  install-argocd:
    name: Install and Configure ArgoCD
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event.inputs.terraform_action == 'apply'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
            --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for ArgoCD
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-application-controller -n argocd

      # Here is the CD part, ArgoCD will deploy the application to the AKS cluster.
      - name: Configure ArgoCD
        run: |
          kubectl apply -f argocd/project.yaml
          kubectl apply -f argocd/notifications.yaml
          sleep 10
          kubectl apply -f argocd/application.yaml

      - name: Generate ArgoCD summary
        run: |
          echo "## ArgoCD Installed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- AKS Cluster: ${{ needs.terraform-apply.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD Namespace: argocd" >> $GITHUB_STEP_SUMMARY
          echo "- Applications: project, notifications, application" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY