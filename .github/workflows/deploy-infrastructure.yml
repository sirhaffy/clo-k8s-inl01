name: Deploy Infrastructure to Azure

on:
  push:
    branches: [master, main]
    paths: ['terraform/**', '.github/workflows/deploy-infrastructure.yml', 'argocd/**']
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  TF_VAR_environment: 'prod'
  TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
  TF_VAR_resource_group_name: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
  TF_VAR_naming_prefix: ${{ secrets.PROJECT_PREFIX }}
  TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
  TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
  TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}

jobs:
  setup-backend:
    name: Setup Backend
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Backend Infrastructure
        run: |
          # Resource Group
          if ! az group show --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating resource group..."
            az group create --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" --location "${{ env.TF_VAR_location }}"
          else
            echo "Resource group already exists"
          fi

          # Storage Account
          if ! az storage account show --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Creating storage account..."
            az storage account create \
              --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
              --location "${{ env.TF_VAR_location }}" \
              --sku Standard_LRS \
              --allow-blob-public-access false
          else
            echo "Storage account already exists"
          fi

          # Container
          if ! az storage container show --name "${{ env.TF_BACKEND_CONTAINER }}" --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --auth-mode login &>/dev/null; then
            echo "Creating container..."
            az storage container create \
              --name "${{ env.TF_BACKEND_CONTAINER }}" \
              --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
              --auth-mode login
          else
            echo "Container already exists"
          fi

      - name: Backend Summary
        run: |
          echo "## Backend Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | \`${{ env.TF_BACKEND_RESOURCE_GROUP }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Storage Account | \`${{ env.TF_BACKEND_STORAGE_ACCOUNT }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Container | \`${{ env.TF_BACKEND_CONTAINER }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Ready |" >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: setup-backend
    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        continue-on-error: true
        run: |
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var="environment=${{ env.TF_VAR_environment }}" \
            -var="location=${{ env.TF_VAR_location }}" \
            -var="resource_group_name=${{ env.TF_VAR_resource_group_name }}" \
            -var="naming_prefix=${{ env.TF_VAR_naming_prefix }}"
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Check Plan Status
        if: steps.plan.outputs.exitcode == '1'
        run: |
          echo "## Terraform Plan Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The plan encountered errors. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          exit 1

      - uses: actions/upload-artifact@v4
        if: steps.plan.outputs.exitcode != '1'
        with:
          name: tfplan
          path: ./terraform/tfplan

      - name: Plan Summary
        if: always()
        run: |
          if [ "${{ steps.plan.outputs.exitcode }}" == "0" ]; then
            STATUS="No changes detected"
            ICON="✓"
            NEXT_STEP="Will verify infrastructure"
          elif [ "${{ steps.plan.outputs.exitcode }}" == "2" ]; then
            STATUS="Changes detected"
            ICON="→"
            NEXT_STEP="Will proceed to apply"
          else
            STATUS="Plan failed"
            ICON="✗"
            NEXT_STEP="Fix errors and retry"
          fi

          echo "## Terraform Plan $ICON" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | **$STATUS** |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ env.TF_VAR_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | ${{ env.TF_VAR_location }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Next Step | $NEXT_STEP |" >> $GITHUB_STEP_SUMMARY

  verify-infrastructure:
    name: Verify Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.tfplan_exitcode == '0'
    outputs:
      force_apply: ${{ steps.verify.outputs.force_apply }}
    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Infrastructure
        id: verify
        run: |
          # Check if critical resources actually exist
          MISSING_RESOURCES=false

          # Check AKS cluster
          if ! az aks show --name "aks-${{ secrets.PROJECT_PREFIX }}" --resource-group "${{ env.TF_VAR_resource_group_name }}" &>/dev/null; then
            echo "AKS cluster missing"
            MISSING_RESOURCES=true
          fi

          # Check Key Vault (with random suffix pattern)
          if ! az keyvault list --resource-group "${{ env.TF_VAR_resource_group_name }}" --query "[?starts_with(name, 'kv-clok8sinl01')]" --output tsv | head -1 &>/dev/null; then
            echo "Key Vault missing"
            MISSING_RESOURCES=true
          fi

          # Check Storage Account (with random suffix pattern)
          if ! az storage account list --resource-group "${{ env.TF_VAR_resource_group_name }}" --query "[?starts_with(name, 'stclok8sinl01') && !ends_with(name, 'backend')]" --output tsv | head -1 &>/dev/null; then
            echo "Storage Account missing"
            MISSING_RESOURCES=true
          fi

          if [ "$MISSING_RESOURCES" = true ]; then
            echo "Critical resources missing - forcing apply"
            echo "force_apply=true" >> $GITHUB_OUTPUT
          else
            echo "All critical resources exist"
            echo "force_apply=false" >> $GITHUB_OUTPUT
          fi

      - name: Verification Summary
        run: |
          if [ "${{ steps.verify.outputs.force_apply }}" == "true" ]; then
            STATUS="Missing resources detected"
            ICON="⚠️"
            NEXT_STEP="Will force apply"
          else
            STATUS="All resources exist"
            ICON="✅"
            NEXT_STEP="No action needed"
          fi

          echo "## Infrastructure Verification $ICON" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | **$STATUS** |" >> $GITHUB_STEP_SUMMARY
          echo "| Next Step | $NEXT_STEP |" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, verify-infrastructure]
    if: |
      always() && (
        needs.terraform-plan.outputs.tfplan_exitcode == '2' ||
        (needs.verify-infrastructure.result == 'success' && needs.verify-infrastructure.outputs.force_apply == 'true')
      )
    outputs:
      resource_group_name: ${{ steps.terraform.outputs.resource_group_name }}
      aks_cluster_name: ${{ steps.terraform.outputs.aks_cluster_name }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT

      - name: Apply Summary
        run: |
          echo "## Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ env.TF_VAR_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Location | ${{ env.TF_VAR_location }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | \`${{ steps.terraform.outputs.resource_group_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| AKS Cluster | \`${{ steps.terraform.outputs.aks_cluster_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next: ArgoCD installation" >> $GITHUB_STEP_SUMMARY

  install-argocd:
    name: Install ArgoCD
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
            --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} \
            --overwrite-existing      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for ArgoCD
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-application-controller -n argocd

      - name: Configure ArgoCD Applications
        run: |
          kubectl apply -f argocd/project.yaml
          kubectl apply -f argocd/notifications.yaml
          sleep 10
          kubectl apply -f argocd/application.yaml

      - name: Get ArgoCD Admin Password
        id: argocd_password
        run: |
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "::add-mask::$PASSWORD"
          echo "password=$PASSWORD" >> $GITHUB_OUTPUT

      - name: ArgoCD Summary
        run: |
          echo "## ArgoCD Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ArgoCD Server | Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Controller | Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Project Config | Applied |" >> $GITHUB_STEP_SUMMARY
          echo "| Notifications | Applied |" >> $GITHUB_STEP_SUMMARY
          echo "| Applications | Applied |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Get ArgoCD URL" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get svc argocd-server -n argocd" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Login credentials" >> $GITHUB_STEP_SUMMARY
          echo "Username: admin" >> $GITHUB_STEP_SUMMARY
          echo "Password: (stored in GitHub Actions secret output)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Access ArgoCD UI via LoadBalancer IP" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application sync status" >> $GITHUB_STEP_SUMMARY
          echo "- Configure additional applications as needed" >> $GITHUB_STEP_SUMMARY