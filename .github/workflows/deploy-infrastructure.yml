name: Deploy Infrastructure to Azure

on:
  push:
    branches: [master, main]
    paths: ['terraform/**', '.github/workflows/deploy-infrastructure.yml', 'argocd/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev' # Change to 'prod' here if you want to deploy to production on master/main
        type: choice
        options: [dev, staging, production]
      terraform_action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [plan, apply, destroy]

env:
  ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
  ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
  ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
  ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
  TF_VAR_location: ${{ secrets.AZURE_LOCATION }}
  TF_VAR_naming_prefix: "${{ secrets.PROJECT_PREFIX }}-${{ github.event.inputs.environment || 'dev' }}"
  TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
  TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
  TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Backend Infrastructure
        run: |
          echo "Verifying backend infrastructure exists..."

          # Check Resource Group
          if ! az group show --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Resource Group '${{ env.TF_BACKEND_RESOURCE_GROUP }}' not found!"
            echo "Run setup commands from SETUP.md first"
            exit 1
          fi
          echo "Resource Group exists: ${{ env.TF_BACKEND_RESOURCE_GROUP }}"

          # Check Storage Account
          if ! az storage account show --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Storage Account '${{ env.TF_BACKEND_STORAGE_ACCOUNT }}' not found!"
            echo "Run setup commands from SETUP.md first"
            exit 1
          fi
          echo "Storage Account exists: ${{ env.TF_BACKEND_STORAGE_ACCOUNT }}"

          # Check Storage Container
          if ! az storage container show --name "${{ env.TF_BACKEND_CONTAINER }}" --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --auth-mode login &>/dev/null; then
            echo "Storage Container '${{ env.TF_BACKEND_CONTAINER }}' not found!"
            echo "Run setup commands from SETUP.md first"
            exit 1
          fi
          echo "Storage Container exists: ${{ env.TF_BACKEND_CONTAINER }}"

          # Check Key Vault (if used)
          KV_NAME="kv-${{ secrets.PROJECT_PREFIX || 'clo-k8s-inl01' }}-tfstate"
          if ! az keyvault show --name "$KV_NAME" &>/dev/null; then
            echo "Key Vault '$KV_NAME' not found - may not be needed for basic backend"
          else
            echo "Key Vault exists: $KV_NAME"
          fi

          echo "Backend infrastructure verification complete!"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.TF_VAR_environment }}/terraform.tfstate"

          terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        continue-on-error: true
        run: |
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var="environment=${{ env.TF_VAR_environment }}" \
            -var="location=${{ env.TF_VAR_location }}" \
            -var="naming_prefix=${{ env.TF_VAR_naming_prefix }}"

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}
          path: ./terraform/tfplan

      - name: Generate plan summary
        run: |
          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Location: ${{ env.TF_VAR_location }}" >> $GITHUB_STEP_SUMMARY
          echo "- Naming prefix: ${{ env.TF_VAR_naming_prefix }}" >> $GITHUB_STEP_SUMMARY
          echo "- Plan exit code: ${{ steps.plan.outputs.exitcode }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend status: Infrastructure verified" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: (github.event_name == 'push' || github.event.inputs.terraform_action == 'apply') && needs.terraform-plan.outputs.tfplan_exitcode == '2'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    outputs:
      resource_group_name: ${{ steps.terraform.outputs.resource_group_name }}
      aks_cluster_name: ${{ steps.terraform.outputs.aks_cluster_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Backend Infrastructure
        run: |
          echo "Verifying backend infrastructure exists..."

          # Check Resource Group
          if ! az group show --name "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Resource Group '${{ env.TF_BACKEND_RESOURCE_GROUP }}' not found!"
            exit 1
          fi
          echo "Resource Group exists"

          # Check Storage Account
          if ! az storage account show --name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --resource-group "${{ env.TF_BACKEND_RESOURCE_GROUP }}" &>/dev/null; then
            echo "Storage Account '${{ env.TF_BACKEND_STORAGE_ACCOUNT }}' not found!"
            exit 1
          fi
          echo "Storage Account exists"

          # Check Storage Container
          if ! az storage container show --name "${{ env.TF_BACKEND_CONTAINER }}" --account-name "${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" --auth-mode login &>/dev/null; then
            echo "Storage Container '${{ env.TF_BACKEND_CONTAINER }}' not found!"
            exit 1
          fi
          echo "Storage Container exists"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}
          path: ./terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.TF_VAR_environment }}/terraform.tfstate"

      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan

          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT

      - name: Generate apply summary
        run: |
          echo "## Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Location: ${{ env.TF_VAR_location }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ steps.terraform.outputs.resource_group_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- AKS Cluster: ${{ steps.terraform.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  install-argocd:
    name: Install and Configure ArgoCD
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event_name == 'push' || github.event.inputs.terraform_action == 'apply'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
            --name ${{ needs.terraform-apply.outputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for ArgoCD
        run: |
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-application-controller -n argocd

      # Here is the CD part, ArgoCD will deploy the application to the AKS cluster.
      - name: Configure ArgoCD
        run: |
          kubectl apply -f argocd/project.yaml
          kubectl apply -f argocd/notifications.yaml
          sleep 10
          kubectl apply -f argocd/application.yaml

      - name: Generate ArgoCD summary
        run: |
          echo "## ArgoCD Installed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ env.TF_VAR_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- AKS Cluster: ${{ needs.terraform-apply.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD Namespace: argocd" >> $GITHUB_STEP_SUMMARY
          echo "- Applications: project, notifications, application" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY